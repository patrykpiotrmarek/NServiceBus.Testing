[assembly: System.CLSCompliantAttribute(true)]
[assembly: System.Runtime.InteropServices.ComVisibleAttribute(false)]
[assembly: System.Runtime.Versioning.TargetFrameworkAttribute(".NETFramework,Version=v4.5.2", FrameworkDisplayName=".NET Framework 4.5.2")]
namespace NServiceBus_6.Testing
{
    public class ExpectationException : System.Exception
    {
        public ExpectationException() { }
        public ExpectationException(string message) { }
    }
    public class FakeBuilder : NServiceBus_6.ObjectBuilder.IBuilder, System.IDisposable
    {
        public FakeBuilder() { }
        public virtual object Build(System.Type typeToBuild) { }
        public virtual T Build<T>() { }
        public virtual System.Collections.Generic.IEnumerable<object> BuildAll(System.Type typeToBuild) { }
        public virtual System.Collections.Generic.IEnumerable<T> BuildAll<T>() { }
        public virtual void BuildAndDispatch(System.Type typeToBuild, System.Action<object> action) { }
        public virtual NServiceBus_6.ObjectBuilder.IBuilder CreateChildBuilder() { }
        public virtual void Dispose() { }
        public void Register<T>(params T[] instance)
            where T :  class { }
        public void Register<T>(System.Func<T> factory) { }
        public void Register<T>(System.Func<T[]> factory)
            where T :  class { }
        public virtual void Release(object instance) { }
    }
    public class Handler<T>
    {
        public NServiceBus_6.Testing.Handler<T> ConfigureHandlerContext(System.Action<NServiceBus_6.Testing.TestableMessageHandlerContext> contextInitializer) { }
        public NServiceBus_6.Testing.Handler<T> ExpectDefer<TMessage>(System.Func<TMessage, System.TimeSpan, bool> check) { }
        public NServiceBus_6.Testing.Handler<T> ExpectDefer<TMessage>(System.Func<TMessage, System.DateTime, bool> check) { }
        public NServiceBus_6.Testing.Handler<T> ExpectDoNotContinueDispatchingCurrentMessageToHandlers() { }
        public NServiceBus_6.Testing.Handler<T> ExpectForwardCurrentMessageTo(System.Func<string, bool> check = null) { }
        public NServiceBus_6.Testing.Handler<T> ExpectHandleCurrentMessageLater() { }
        public NServiceBus_6.Testing.Handler<T> ExpectNotDefer<TMessage>(System.Func<TMessage, System.TimeSpan, bool> check) { }
        public NServiceBus_6.Testing.Handler<T> ExpectNotDefer<TMessage>(System.Func<TMessage, System.DateTime, bool> check) { }
        public NServiceBus_6.Testing.Handler<T> ExpectNotForwardCurrentMessageTo(System.Func<string, bool> check = null) { }
        public NServiceBus_6.Testing.Handler<T> ExpectNotPublish<TMessage>(System.Func<TMessage, NServiceBus_6.PublishOptions, bool> check = null) { }
        public NServiceBus_6.Testing.Handler<T> ExpectNotPublish<TMessage>(System.Func<TMessage, bool> check) { }
        public NServiceBus_6.Testing.Handler<T> ExpectNotReply<TMessage>(System.Func<TMessage, NServiceBus_6.ReplyOptions, bool> check = null) { }
        public NServiceBus_6.Testing.Handler<T> ExpectNotReply<TMessage>(System.Func<TMessage, bool> check) { }
        public NServiceBus_6.Testing.Handler<T> ExpectNotSend<TMessage>(System.Func<TMessage, NServiceBus_6.SendOptions, bool> check = null) { }
        public NServiceBus_6.Testing.Handler<T> ExpectNotSend<TMessage>(System.Func<TMessage, bool> check) { }
        public NServiceBus_6.Testing.Handler<T> ExpectNotSendLocal<TMessage>(System.Func<TMessage, bool> check = null) { }
        public NServiceBus_6.Testing.Handler<T> ExpectNotSendToDestination<TMessage>(System.Func<TMessage, string, bool> check = null) { }
        [System.ObsoleteAttribute(@"ExpectNotSendToSites is no longer supported by the NServiceBus Testing Framework. You can access the configured sites on the SendOptions by calling 'GetSitesRoutingTo()'. Check the documentation to find out more about writing Unit Tests without the Testing Framework in NServiceBus 6. The member currently throws a NotImplementedException. Will be removed in version 7.0.0.", true)]
        public NServiceBus_6.Testing.Handler<T> ExpectNotSendToSites<TMessage>(System.Func<TMessage, System.Collections.Generic.IEnumerable<string>, bool> check) { }
        public NServiceBus_6.Testing.Handler<T> ExpectPublish<TMessage>(System.Func<TMessage, NServiceBus_6.PublishOptions, bool> check = null) { }
        public NServiceBus_6.Testing.Handler<T> ExpectPublish<TMessage>(System.Func<TMessage, bool> check) { }
        public NServiceBus_6.Testing.Handler<T> ExpectReply<TMessage>(System.Func<TMessage, NServiceBus_6.ReplyOptions, bool> check = null) { }
        public NServiceBus_6.Testing.Handler<T> ExpectReply<TMessage>(System.Func<TMessage, bool> check) { }
        [System.ObsoleteAttribute("Use `ExpectReply` instead. The member currently throws a NotImplementedException." +
            " Will be removed in version 7.0.0.", true)]
        public NServiceBus_6.Testing.Handler<T> ExpectReturn<TEnum>(System.Func<TEnum, bool> check) { }
        public NServiceBus_6.Testing.Handler<T> ExpectSend<TMessage>(System.Func<TMessage, NServiceBus_6.SendOptions, bool> check = null) { }
        public NServiceBus_6.Testing.Handler<T> ExpectSend<TMessage>(System.Func<TMessage, bool> check) { }
        public NServiceBus_6.Testing.Handler<T> ExpectSendLocal<TMessage>(System.Func<TMessage, bool> check = null) { }
        public NServiceBus_6.Testing.Handler<T> ExpectSendToDestination<TMessage>(System.Func<TMessage, string, bool> check) { }
        [System.ObsoleteAttribute(@"ExpectSendToSites is no longer supported by the NServiceBus Testing Framework. You can access the configured sites on the SendOptions by calling 'GetSitesRoutingTo()'. Check the documentation to find out more about writing Unit Tests without the Testing Framework in NServiceBus 6. The member currently throws a NotImplementedException. Will be removed in version 7.0.0.", true)]
        public NServiceBus_6.Testing.Handler<T> ExpectSendToSites<TMessage>(System.Func<TMessage, System.Collections.Generic.IEnumerable<string>, bool> check) { }
        public void OnMessage<TMessage>(string messageId, System.Action<TMessage> initializeMessage = null) { }
        public void OnMessage<TMessage>(System.Action<TMessage> initializeMessage = null) { }
        public void OnMessage<TMessage>(TMessage message, string messageId) { }
        public void OnMessage<TMessage>(TMessage initializedMessage) { }
        public NServiceBus_6.Testing.Handler<T> SetIncomingHeader(string key, string value) { }
        public NServiceBus_6.Testing.Handler<T> WithExternalDependencies(System.Action<T> actionToSetUpExternalDependencies) { }
    }
    public class OutgoingMessage<TMessage, TOptions>
        where TOptions : NServiceBus_6.Extensibility.ExtendableOptions
    {
        protected OutgoingMessage(TMessage message, TOptions options) { }
        public TMessage Message { get; }
        public TOptions Options { get; }
    }
    public class static OutgoingMessageExtensions
    {
        public static System.Collections.Generic.IEnumerable<NServiceBus_6.Testing.RepliedMessage<TMessage>> Containing<TMessage>(this System.Collections.Generic.IEnumerable<NServiceBus_6.Testing.RepliedMessage<object>> repliedMessages) { }
        public static System.Collections.Generic.IEnumerable<NServiceBus_6.Testing.PublishedMessage<TMessage>> Containing<TMessage>(this System.Collections.Generic.IEnumerable<NServiceBus_6.Testing.PublishedMessage<object>> publishedMessages) { }
        public static System.Collections.Generic.IEnumerable<NServiceBus_6.Testing.SentMessage<TMessage>> Containing<TMessage>(this System.Collections.Generic.IEnumerable<NServiceBus_6.Testing.SentMessage<object>> sentMessages) { }
        public static TMessage Message<TMessage>(this NServiceBus_6.Testing.RepliedMessage<object> sentMessage)
            where TMessage :  class { }
        public static TMessage Message<TMessage>(this NServiceBus_6.Testing.PublishedMessage<object> sentMessage)
            where TMessage :  class { }
        public static TMessage Message<TMessage>(this NServiceBus_6.Testing.SentMessage<object> sentMessage)
            where TMessage :  class { }
    }
    public class PublishedMessage<TMessage> : NServiceBus_6.Testing.OutgoingMessage<TMessage, NServiceBus_6.PublishOptions>
    {
        public PublishedMessage(TMessage message, NServiceBus_6.PublishOptions options) { }
    }
    public class RepliedMessage<TMessage> : NServiceBus_6.Testing.OutgoingMessage<TMessage, NServiceBus_6.ReplyOptions>
    {
        public RepliedMessage(TMessage message, NServiceBus_6.ReplyOptions options) { }
    }
    public class Saga<T>
        where T : NServiceBus_6.Saga
    {
        public NServiceBus_6.Testing.Saga<T> AssertSagaCompletionIs(bool complete) { }
        public NServiceBus_6.Testing.Saga<T> ConfigureHandlerContext(System.Action<NServiceBus_6.Testing.TestableMessageHandlerContext> contextInitializer) { }
        public NServiceBus_6.Testing.Saga<T> ExpectForwardCurrentMessageTo(System.Func<string, bool> check = null) { }
        public NServiceBus_6.Testing.Saga<T> ExpectHandleCurrentMessageLater() { }
        public NServiceBus_6.Testing.Saga<T> ExpectNotForwardCurrentMessageTo(System.Func<string, bool> check = null) { }
        public NServiceBus_6.Testing.Saga<T> ExpectNoTimeoutToBeSetAt<TMessage>(System.Func<TMessage, System.DateTime, bool> check = null) { }
        public NServiceBus_6.Testing.Saga<T> ExpectNoTimeoutToBeSetIn<TMessage>(System.Func<TMessage, System.TimeSpan, bool> check = null) { }
        public NServiceBus_6.Testing.Saga<T> ExpectNotPublish<TMessage>(System.Func<TMessage, NServiceBus_6.PublishOptions, bool> check = null) { }
        public NServiceBus_6.Testing.Saga<T> ExpectNotPublish<TMessage>(System.Func<TMessage, bool> check) { }
        public NServiceBus_6.Testing.Saga<T> ExpectNotPublish<TMessage>(System.Action<TMessage> check) { }
        public NServiceBus_6.Testing.Saga<T> ExpectNotReply<TMessage>(System.Func<TMessage, NServiceBus_6.ReplyOptions, bool> check = null) { }
        public NServiceBus_6.Testing.Saga<T> ExpectNotReply<TMessage>(System.Func<TMessage, bool> check) { }
        public NServiceBus_6.Testing.Saga<T> ExpectNotSend<TMessage>(System.Func<TMessage, NServiceBus_6.SendOptions, bool> check = null) { }
        public NServiceBus_6.Testing.Saga<T> ExpectNotSend<TMessage>(System.Func<TMessage, bool> check) { }
        public NServiceBus_6.Testing.Saga<T> ExpectNotSend<TMessage>(System.Action<TMessage> check) { }
        public NServiceBus_6.Testing.Saga<T> ExpectNotSendLocal<TMessage>(System.Func<TMessage, bool> check = null) { }
        public NServiceBus_6.Testing.Saga<T> ExpectNotSendLocal<TMessage>(System.Action<TMessage> check) { }
        public NServiceBus_6.Testing.Saga<T> ExpectNotSendToDestination<TMessage>(System.Action<TMessage, string> check) { }
        public NServiceBus_6.Testing.Saga<T> ExpectNotSendToDestination<TMessage>(System.Func<TMessage, string, bool> check = null) { }
        public NServiceBus_6.Testing.Saga<T> ExpectPublish<TMessage>(System.Func<TMessage, NServiceBus_6.PublishOptions, bool> check = null) { }
        public NServiceBus_6.Testing.Saga<T> ExpectPublish<TMessage>(System.Func<TMessage, bool> check) { }
        public NServiceBus_6.Testing.Saga<T> ExpectPublish<TMessage>(System.Action<TMessage> check) { }
        public NServiceBus_6.Testing.Saga<T> ExpectReply<TMessage>(System.Func<TMessage, NServiceBus_6.ReplyOptions, bool> check = null) { }
        public NServiceBus_6.Testing.Saga<T> ExpectReply<TMessage>(System.Func<TMessage, bool> check) { }
        public NServiceBus_6.Testing.Saga<T> ExpectReplyToOriginator<TMessage>(System.Func<TMessage, bool> check = null) { }
        public NServiceBus_6.Testing.Saga<T> ExpectReplyToOriginator<TMessage>(System.Action<TMessage> check) { }
        public NServiceBus_6.Testing.Saga<T> ExpectSagaData<TSagaData>(System.Func<TSagaData, bool> check)
            where TSagaData : NServiceBus_6.IContainSagaData { }
        public NServiceBus_6.Testing.Saga<T> ExpectSend<TMessage>(System.Func<TMessage, NServiceBus_6.SendOptions, bool> check = null) { }
        public NServiceBus_6.Testing.Saga<T> ExpectSend<TMessage>(System.Func<TMessage, bool> check) { }
        public NServiceBus_6.Testing.Saga<T> ExpectSend<TMessage>(System.Action<TMessage> check) { }
        public NServiceBus_6.Testing.Saga<T> ExpectSendLocal<TMessage>(System.Func<TMessage, bool> check = null) { }
        public NServiceBus_6.Testing.Saga<T> ExpectSendLocal<TMessage>(System.Action<TMessage> check) { }
        public NServiceBus_6.Testing.Saga<T> ExpectSendToDestination<TMessage>(System.Func<TMessage, string, bool> check = null) { }
        public NServiceBus_6.Testing.Saga<T> ExpectSendToDestination<TMessage>(System.Action<TMessage, string> check) { }
        public NServiceBus_6.Testing.Saga<T> ExpectTimeoutToBeSetAt<TMessage>(System.Func<TMessage, System.DateTime, bool> check = null) { }
        public NServiceBus_6.Testing.Saga<T> ExpectTimeoutToBeSetAt<TMessage>(System.Action<TMessage, System.DateTime> check) { }
        public NServiceBus_6.Testing.Saga<T> ExpectTimeoutToBeSetIn<TMessage>(System.Func<TMessage, System.TimeSpan, bool> check = null) { }
        public NServiceBus_6.Testing.Saga<T> ExpectTimeoutToBeSetIn<TMessage>(System.Action<TMessage, System.TimeSpan> check) { }
        public NServiceBus_6.Testing.Saga<T> SetIncomingHeader(string key, string value) { }
        [System.ObsoleteAttribute("Set the message ID on the context by using ConfigureHandlerContext. The member cu" +
            "rrently throws a NotImplementedException. Will be removed in version 7.0.0.", true)]
        public NServiceBus_6.Testing.Saga<T> SetMessageId(string messageId) { }
        public NServiceBus_6.Testing.Saga<T> When(System.Func<T, NServiceBus_6.IMessageHandlerContext, System.Threading.Tasks.Task> sagaIsInvoked) { }
        public NServiceBus_6.Testing.Saga<T> When<TMessage>(System.Func<T, System.Func<TMessage, NServiceBus_6.IMessageHandlerContext, System.Threading.Tasks.Task>> handlerSelector, TMessage message) { }
        public NServiceBus_6.Testing.Saga<T> When<TMessage>(System.Func<T, System.Func<TMessage, NServiceBus_6.IMessageHandlerContext, System.Threading.Tasks.Task>> handlerSelector, System.Action<TMessage> messageInitializer = null) { }
        [System.ObsoleteAttribute("Use `When(Action<T, IMessageHandlerContext> sagaIsInvoked)` instead. The member c" +
            "urrently throws a NotImplementedException. Will be removed in version 7.0.0.", true)]
        public NServiceBus_6.Testing.Saga<T> When(System.Action<T> sagaIsInvoked) { }
        public NServiceBus_6.Testing.Saga<T> WhenHandling<TMessage>(System.Action<TMessage> initializeMessage = null) { }
        public NServiceBus_6.Testing.Saga<T> WhenHandlingTimeout<TMessage>(System.Action<TMessage> initializeMessage = null) { }
        public NServiceBus_6.Testing.Saga<T> WhenReceivesMessageFrom(string client) { }
        public NServiceBus_6.Testing.Saga<T> WhenSagaTimesOut(System.TimeSpan after) { }
        public NServiceBus_6.Testing.Saga<T> WhenSagaTimesOut(System.DateTime at) { }
        public NServiceBus_6.Testing.Saga<T> WhenSagaTimesOut() { }
        public NServiceBus_6.Testing.Saga<T> WithExternalDependencies(System.Action<T> actionToSetUpExternalDependencies) { }
    }
    public class SentMessage<TMessage> : NServiceBus_6.Testing.OutgoingMessage<TMessage, NServiceBus_6.SendOptions>
    {
        public SentMessage(TMessage message, NServiceBus_6.SendOptions options) { }
    }
    public class Subscription : NServiceBus_6.Testing.OutgoingMessage<System.Type, NServiceBus_6.SubscribeOptions>
    {
        public Subscription(System.Type message, NServiceBus_6.SubscribeOptions options) { }
    }
    public class Test
    {
        public Test() { }
        public static TMessage CreateInstance<TMessage>() { }
        public static TMessage CreateInstance<TMessage>(System.Action<TMessage> action) { }
        public static NServiceBus_6.Testing.Handler<THandler> Handler<THandler>()
            where THandler : new() { }
        public static NServiceBus_6.Testing.Handler<THandler> Handler<THandler>(THandler handler) { }
        [System.ObsoleteAttribute("Test initialization is no longer required and can be removed. The member currentl" +
            "y throws a NotImplementedException. Will be removed in version 7.0.0.", true)]
        public static void Initialize(System.Action<NServiceBus_6.EndpointConfiguration> customisations = null) { }
        public static NServiceBus_6.Testing.Saga<TSaga> Saga<TSaga>()
            where TSaga : NServiceBus_6.Saga, new () { }
        public static NServiceBus_6.Testing.Saga<TSaga> Saga<TSaga>(TSaga saga)
            where TSaga : NServiceBus_6.Saga { }
        public static NServiceBus_6.Testing.Saga<TSaga> Saga<TSaga>(System.Guid sagaId)
            where TSaga : NServiceBus_6.Saga, new () { }
        public static NServiceBus_6.Testing.Saga<TSaga> Saga<TSaga>(NServiceBus_6.IContainSagaData sagaData)
            where TSaga : NServiceBus_6.Saga, new () { }
    }
    public class TestableAuditContext : NServiceBus_6.Testing.TestableBehaviorContext, NServiceBus_6.Extensibility.IExtendable, NServiceBus_6.Pipeline.IAuditContext, NServiceBus_6.Pipeline.IBehaviorContext
    {
        public TestableAuditContext() { }
        public System.Collections.Generic.IDictionary<string, string> AddedAuditData { get; }
        public string AuditAddress { get; set; }
        public NServiceBus_6.Transport.OutgoingMessage Message { get; set; }
        public void AddAuditData(string key, string value) { }
    }
    public class TestableBatchDispatchContext : NServiceBus_6.Testing.TestableBehaviorContext, NServiceBus_6.Extensibility.IExtendable, NServiceBus_6.Pipeline.IBatchDispatchContext, NServiceBus_6.Pipeline.IBehaviorContext
    {
        public TestableBatchDispatchContext() { }
        public System.Collections.Generic.IList<NServiceBus_6.Transport.TransportOperation> Operations { get; set; }
    }
    public abstract class TestableBehaviorContext : NServiceBus_6.Extensibility.IExtendable, NServiceBus_6.Pipeline.IBehaviorContext
    {
        protected TestableBehaviorContext() { }
        public NServiceBus_6.Testing.FakeBuilder Builder { get; set; }
        public NServiceBus_6.Extensibility.ContextBag Extensions { get; set; }
        protected virtual NServiceBus_6.ObjectBuilder.IBuilder GetBuilder() { }
    }
    public class TestableDispatchContext : NServiceBus_6.Testing.TestableBehaviorContext, NServiceBus_6.Extensibility.IExtendable, NServiceBus_6.Pipeline.IBehaviorContext, NServiceBus_6.Pipeline.IDispatchContext
    {
        public TestableDispatchContext() { }
        public System.Collections.Generic.IList<NServiceBus_6.Transport.TransportOperation> Operations { get; set; }
    }
    public class TestableEndpointInstance : NServiceBus_6.Testing.TestableMessageSession, NServiceBus_6.IEndpointInstance, NServiceBus_6.IMessageSession
    {
        public TestableEndpointInstance() { }
        public bool EndpointStopped { get; }
        public virtual System.Threading.Tasks.Task Stop() { }
    }
    public class TestableForwardingContext : NServiceBus_6.Testing.TestableBehaviorContext, NServiceBus_6.Extensibility.IExtendable, NServiceBus_6.Pipeline.IBehaviorContext, NServiceBus_6.Pipeline.IForwardingContext
    {
        public TestableForwardingContext() { }
        public string Address { get; set; }
        public NServiceBus_6.Transport.OutgoingMessage Message { get; set; }
    }
    public abstract class TestableIncomingContext : NServiceBus_6.Testing.TestableMessageProcessingContext, NServiceBus_6.Extensibility.IExtendable, NServiceBus_6.IMessageProcessingContext, NServiceBus_6.IPipelineContext, NServiceBus_6.Pipeline.IBehaviorContext, NServiceBus_6.Pipeline.IIncomingContext
    {
        protected TestableIncomingContext(NServiceBus_6.IMessageCreator messageCreator = null) { }
        public NServiceBus_6.Testing.FakeBuilder Builder { get; set; }
        protected virtual NServiceBus_6.ObjectBuilder.IBuilder GetBuilder() { }
    }
    public class TestableIncomingLogicalMessageContext : NServiceBus_6.Testing.TestableIncomingContext, NServiceBus_6.Extensibility.IExtendable, NServiceBus_6.IMessageProcessingContext, NServiceBus_6.IPipelineContext, NServiceBus_6.Pipeline.IBehaviorContext, NServiceBus_6.Pipeline.IIncomingContext, NServiceBus_6.Pipeline.IIncomingLogicalMessageContext
    {
        public TestableIncomingLogicalMessageContext(NServiceBus_6.IMessageCreator messageCreator = null) { }
        public System.Collections.Generic.Dictionary<string, string> Headers { get; set; }
        public NServiceBus_6.Pipeline.LogicalMessage Message { get; set; }
        public bool MessageHandled { get; set; }
        public virtual void UpdateMessageInstance(object newInstance) { }
    }
    public class TestableIncomingPhysicalMessageContext : NServiceBus_6.Testing.TestableIncomingContext, NServiceBus_6.Extensibility.IExtendable, NServiceBus_6.IMessageProcessingContext, NServiceBus_6.IPipelineContext, NServiceBus_6.Pipeline.IBehaviorContext, NServiceBus_6.Pipeline.IIncomingContext, NServiceBus_6.Pipeline.IIncomingPhysicalMessageContext
    {
        public TestableIncomingPhysicalMessageContext() { }
        public NServiceBus_6.Transport.IncomingMessage Message { get; set; }
        public virtual void UpdateMessage(byte[] body) { }
    }
    public class TestableInvokeHandlerContext : NServiceBus_6.Testing.TestableIncomingContext, NServiceBus_6.Extensibility.IExtendable, NServiceBus_6.IMessageHandlerContext, NServiceBus_6.IMessageProcessingContext, NServiceBus_6.IPipelineContext, NServiceBus_6.Pipeline.IBehaviorContext, NServiceBus_6.Pipeline.IIncomingContext, NServiceBus_6.Pipeline.IInvokeHandlerContext
    {
        public TestableInvokeHandlerContext(NServiceBus_6.IMessageCreator messageCreator = null) { }
        public bool DoNotContinueDispatchingCurrentMessageToHandlersWasCalled { get; set; }
        public bool HandleCurrentMessageLaterWasCalled { get; set; }
        public bool HandlerInvocationAborted { get; }
        public System.Collections.Generic.Dictionary<string, string> Headers { get; set; }
        public object MessageBeingHandled { get; set; }
        public NServiceBus_6.Pipeline.MessageHandler MessageHandler { get; set; }
        public NServiceBus_6.Unicast.Messages.MessageMetadata MessageMetadata { get; set; }
        public NServiceBus_6.Persistence.SynchronizedStorageSession SynchronizedStorageSession { get; set; }
        public void DoNotContinueDispatchingCurrentMessageToHandlers() { }
        public virtual System.Threading.Tasks.Task HandleCurrentMessageLater() { }
    }
    public class TestableMessageHandlerContext : NServiceBus_6.Testing.TestableInvokeHandlerContext
    {
        public TestableMessageHandlerContext(NServiceBus_6.IMessageCreator messageCreator = null) { }
    }
    public class TestableMessageProcessingContext : NServiceBus_6.Testing.TestablePipelineContext, NServiceBus_6.Extensibility.IExtendable, NServiceBus_6.IMessageProcessingContext, NServiceBus_6.IPipelineContext
    {
        public TestableMessageProcessingContext(NServiceBus_6.IMessageCreator messageCreator = null) { }
        public virtual string[] ForwardedMessages { get; }
        public System.Collections.Generic.IDictionary<string, string> MessageHeaders { get; set; }
        public string MessageId { get; set; }
        public virtual NServiceBus_6.Testing.RepliedMessage<>[] RepliedMessages { get; }
        public string ReplyToAddress { get; set; }
        public virtual System.Threading.Tasks.Task ForwardCurrentMessageTo(string destination) { }
        public virtual System.Threading.Tasks.Task Reply(object message, NServiceBus_6.ReplyOptions options) { }
        public virtual System.Threading.Tasks.Task Reply<T>(System.Action<T> messageConstructor, NServiceBus_6.ReplyOptions options) { }
    }
    public class TestableMessageSession : NServiceBus_6.Testing.TestablePipelineContext, NServiceBus_6.IMessageSession
    {
        public TestableMessageSession() { }
        public virtual NServiceBus_6.Testing.Subscription[] Subscriptions { get; }
        public virtual NServiceBus_6.Testing.Unsubscription[] Unsubscription { get; }
        public virtual System.Threading.Tasks.Task Subscribe(System.Type eventType, NServiceBus_6.SubscribeOptions options) { }
        public virtual System.Threading.Tasks.Task Unsubscribe(System.Type eventType, NServiceBus_6.UnsubscribeOptions options) { }
    }
    public class TestableOutgoingContext : NServiceBus_6.Testing.TestablePipelineContext, NServiceBus_6.Extensibility.IExtendable, NServiceBus_6.IPipelineContext, NServiceBus_6.Pipeline.IBehaviorContext, NServiceBus_6.Pipeline.IOutgoingContext
    {
        public TestableOutgoingContext() { }
        public NServiceBus_6.Testing.FakeBuilder Builder { get; set; }
        public System.Collections.Generic.Dictionary<string, string> Headers { get; set; }
        public string MessageId { get; set; }
        protected virtual NServiceBus_6.ObjectBuilder.IBuilder GetBuilder() { }
    }
    public class TestableOutgoingLogicalMessageContext : NServiceBus_6.Testing.TestableOutgoingContext, NServiceBus_6.Extensibility.IExtendable, NServiceBus_6.IPipelineContext, NServiceBus_6.Pipeline.IBehaviorContext, NServiceBus_6.Pipeline.IOutgoingContext, NServiceBus_6.Pipeline.IOutgoingLogicalMessageContext
    {
        public TestableOutgoingLogicalMessageContext() { }
        public NServiceBus_6.Pipeline.OutgoingLogicalMessage Message { get; set; }
        public System.Collections.Generic.IReadOnlyCollection<NServiceBus_6.Routing.RoutingStrategy> RoutingStrategies { get; set; }
        public virtual void UpdateMessage(object newInstance) { }
    }
    public class TestableOutgoingPhysicalMessageContext : NServiceBus_6.Testing.TestableOutgoingContext, NServiceBus_6.Extensibility.IExtendable, NServiceBus_6.IPipelineContext, NServiceBus_6.Pipeline.IBehaviorContext, NServiceBus_6.Pipeline.IOutgoingContext, NServiceBus_6.Pipeline.IOutgoingPhysicalMessageContext
    {
        public TestableOutgoingPhysicalMessageContext() { }
        public byte[] Body { get; set; }
        public System.Collections.Generic.IReadOnlyCollection<NServiceBus_6.Routing.RoutingStrategy> RoutingStrategies { get; set; }
        public virtual void UpdateMessage(byte[] body) { }
    }
    public class TestableOutgoingPublishContext : NServiceBus_6.Testing.TestableOutgoingContext, NServiceBus_6.Extensibility.IExtendable, NServiceBus_6.IPipelineContext, NServiceBus_6.Pipeline.IBehaviorContext, NServiceBus_6.Pipeline.IOutgoingContext, NServiceBus_6.Pipeline.IOutgoingPublishContext
    {
        public TestableOutgoingPublishContext() { }
        public NServiceBus_6.Pipeline.OutgoingLogicalMessage Message { get; set; }
    }
    public class TestableOutgoingReplyContext : NServiceBus_6.Testing.TestableOutgoingContext, NServiceBus_6.Extensibility.IExtendable, NServiceBus_6.IPipelineContext, NServiceBus_6.Pipeline.IBehaviorContext, NServiceBus_6.Pipeline.IOutgoingContext, NServiceBus_6.Pipeline.IOutgoingReplyContext
    {
        public TestableOutgoingReplyContext() { }
        public NServiceBus_6.Pipeline.OutgoingLogicalMessage Message { get; set; }
    }
    public class TestableOutgoingSendContext : NServiceBus_6.Testing.TestableOutgoingContext, NServiceBus_6.Extensibility.IExtendable, NServiceBus_6.IPipelineContext, NServiceBus_6.Pipeline.IBehaviorContext, NServiceBus_6.Pipeline.IOutgoingContext, NServiceBus_6.Pipeline.IOutgoingSendContext
    {
        public TestableOutgoingSendContext() { }
        public NServiceBus_6.Pipeline.OutgoingLogicalMessage Message { get; set; }
    }
    public class TestablePipelineContext : NServiceBus_6.Extensibility.IExtendable, NServiceBus_6.IPipelineContext
    {
        protected NServiceBus_6.IMessageCreator messageCreator;
        public TestablePipelineContext(NServiceBus_6.IMessageCreator messageCreator = null) { }
        public NServiceBus_6.Extensibility.ContextBag Extensions { get; set; }
        public virtual NServiceBus_6.Testing.PublishedMessage<>[] PublishedMessages { get; }
        public virtual NServiceBus_6.Testing.SentMessage<>[] SentMessages { get; }
        public virtual System.Threading.Tasks.Task Publish(object message, NServiceBus_6.PublishOptions options) { }
        public virtual System.Threading.Tasks.Task Publish<T>(System.Action<T> messageConstructor, NServiceBus_6.PublishOptions publishOptions) { }
        public virtual System.Threading.Tasks.Task Send(object message, NServiceBus_6.SendOptions options) { }
        public virtual System.Threading.Tasks.Task Send<T>(System.Action<T> messageConstructor, NServiceBus_6.SendOptions options) { }
    }
    public class TestableRoutingContext : NServiceBus_6.Testing.TestableBehaviorContext, NServiceBus_6.Extensibility.IExtendable, NServiceBus_6.Pipeline.IBehaviorContext, NServiceBus_6.Pipeline.IRoutingContext
    {
        public TestableRoutingContext() { }
        public NServiceBus_6.Transport.OutgoingMessage Message { get; set; }
        public System.Collections.Generic.IReadOnlyCollection<NServiceBus_6.Routing.RoutingStrategy> RoutingStrategies { get; set; }
    }
    public class TestableSubscribeContext : NServiceBus_6.Testing.TestableBehaviorContext, NServiceBus_6.Extensibility.IExtendable, NServiceBus_6.Pipeline.IBehaviorContext, NServiceBus_6.Pipeline.ISubscribeContext
    {
        public TestableSubscribeContext() { }
        public System.Type EventType { get; set; }
    }
    public class TestableTransportReceiveContext : NServiceBus_6.Testing.TestableBehaviorContext, NServiceBus_6.Extensibility.IExtendable, NServiceBus_6.Pipeline.IBehaviorContext, NServiceBus_6.Pipeline.ITransportReceiveContext
    {
        public TestableTransportReceiveContext() { }
        public NServiceBus_6.Transport.IncomingMessage Message { get; set; }
        public bool ReceiveOperationAborted { get; set; }
        public virtual void AbortReceiveOperation() { }
    }
    public class TestableUnsubscribeContext : NServiceBus_6.Testing.TestableBehaviorContext, NServiceBus_6.Extensibility.IExtendable, NServiceBus_6.Pipeline.IBehaviorContext, NServiceBus_6.Pipeline.IUnsubscribeContext
    {
        public TestableUnsubscribeContext() { }
        public System.Type EventType { get; set; }
    }
    public class TestingLoggerFactory : NServiceBus_6.Logging.LoggingFactoryDefinition
    {
        public TestingLoggerFactory() { }
        protected override NServiceBus_6.Logging.ILoggerFactory GetLoggingFactory() { }
        public void Level(NServiceBus_6.Logging.LogLevel level) { }
        public void WriteTo(System.IO.TextWriter writer) { }
    }
    public class TimeoutMessage<TMessage> : NServiceBus_6.Testing.OutgoingMessage<TMessage, NServiceBus_6.SendOptions>
    {
        public TimeoutMessage(TMessage message, NServiceBus_6.SendOptions options, System.TimeSpan within) { }
        public TimeoutMessage(TMessage message, NServiceBus_6.SendOptions options, System.DateTimeOffset at) { }
        public System.Nullable<System.DateTimeOffset> At { get; }
        public System.Nullable<System.TimeSpan> Within { get; }
    }
    public class Unsubscription : NServiceBus_6.Testing.OutgoingMessage<System.Type, NServiceBus_6.UnsubscribeOptions>
    {
        public Unsubscription(System.Type message, NServiceBus_6.UnsubscribeOptions options) { }
    }
}